require('dotenv').config();

if (!process.env.JWT_SECRET) {
    console.warn("‚ö†Ô∏è JWT_SECRET –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (.env)! –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.");
    process.env.JWT_SECRET = 'your_secret_key_unsafe_for_production';
}

const models = require('./models');
const sequelize = require("./config/db");
const express = require('express');
const cors = require('cors');
const fs = require('fs');
const path = require('path');
const http = require('http');
const https = require('https');

const authRoutes = require('./routes/authRoutes');
const productRoutes = require('./routes/productRoutes');
const authenticateUser = require('./middleware/authMiddleware');
const userRoutes = require('./routes/userRoutes');
const categoryRoutes = require("./routes/categoryRoutes");
const adminRoutes = require("./routes/adminRoutes");
const subcategoryRoutes = require('./routes/subcategoryRoutes');
const cartRoutes = require('./routes/cartRoutes');
const orderRouter = require('./routes/orderRoutes');
const uploadRouter = require('./routes/uploadsRoutes');

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
sequelize.sync().then(() => console.log("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"));

const app = express();

// Middleware
app.use(express.json({ limit: '5mb' }));
app.use(cors());
app.use('/web', express.static(path.join(__dirname, 'web')));
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// Routes
app.use("/admin", adminRoutes);
app.use('/auth', authRoutes);
app.use('/category', categoryRoutes);
app.use('/subcategory', subcategoryRoutes);
app.use('/products', productRoutes);
app.use('/user', userRoutes);
app.use('/cart', cartRoutes);
app.use('/orders', orderRouter);
app.use('/upload', uploadRouter);

// HTTP server (–ø–æ—Ä—Ç 5000)
const HTTP_PORT = 5000;
http.createServer(app).listen(HTTP_PORT, () => {
    console.log(`üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${HTTP_PORT}`);
});

// HTTPS server (–ø–æ—Ä—Ç 443 –∏–ª–∏ –∏–∑ .env)
const HTTPS_PORT = process.env.HTTPS_PORT || 443;
let httpsOptions;

try {
    httpsOptions = {
        key: fs.readFileSync(path.join(__dirname, 'server.key')),
        cert: fs.readFileSync(path.join(__dirname, 'server.crt')),
    };

    https.createServer(httpsOptions, app).listen(HTTPS_PORT, () => {
        console.log(`üîê HTTPS —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${HTTPS_PORT}`);
    });
} catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤:", err.message);
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error));
process.on('unhandledRejection', (error) => console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', error));
