const bcrypt = require("bcrypt");
const jwt = require('jsonwebtoken');
const User = require("../models/User");

const JWT_SECRET = process.env.JWT_SECRET;
if (!JWT_SECRET) {
    console.error("‚ùå –û—à–∏–±–∫–∞: JWT_SECRET –Ω–µ –∑–∞–¥–∞–Ω!");
    process.exit(1);
}

// üìå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const register = async (req, res) => {
    try {
        const { name, email, password, phone, address, role } = req.body;
        if (!name || !email || !password) {
            return res.status(400).json({ message: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è" });
        }

        const trimmedEmail = email.trim();
        const existingUser = await User.findOne({ where: { email: trimmedEmail } });

        if (existingUser) {
            return res.status(400).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" });
        }

        const hashedPassword = await bcrypt.hash(password, 10);
        const userRole = role || "client";

        await User.create({
            name,
            email: trimmedEmail,
            password: hashedPassword,
            phone,
            address,
            role: userRole,
        });

        res.status(201).json({ message: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞" });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error);
        res.status(500).json({ message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
};

// üìå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
const login = async (req, res) => {
    try {
        const { email, password } = req.body;
        if (!email || !password) {
            return res.status(400).json({ message: "–í–≤–µ–¥–∏—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å" });
        }

        const trimmedEmail = email.trim();
        const user = await User.findOne({ where: { email: trimmedEmail } });

        if (!user) {
            return res.status(400).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        const isPasswordValid = await bcrypt.compare(password, user.password);
        if (!isPasswordValid) {
            return res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å" });
        }

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
        const token = jwt.sign({ userId: user.id, role: user.role }, JWT_SECRET, { expiresIn: "1h" });

        res.status(200).json({ 
            message: "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞", 
            token, 
            user: {
                id: user.id,
                name: user.name,
                email: user.email,
                phone: user.phone,
                address: user.address,
                role: user.role,
                is_verified: user.is_verified
            }
        });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", error);
        res.status(500).json({ message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
};

// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const getUser = async (req, res) => {
    try {
        const userId = req.user.userId; // –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ middleware
        const user = await User.findByPk(userId, {
            attributes: ["id", "name", "email", "phone", "address", "role", "is_verified"]
        });

        if (!user) {
            return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        res.json(user);
    } catch (error) {
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
};

module.exports = { register, login, getUser };
