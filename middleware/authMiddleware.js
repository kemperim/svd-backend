const jwt = require("jsonwebtoken");

module.exports = (req, res, next) => {
    const authHeader = req.headers.authorization;
    console.log("üîç –ó–∞–≥–æ–ª–æ–≤–æ–∫ Authorization:", authHeader);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 'Bearer '
    if (!authHeader || !authHeader.startsWith("Bearer ")) {
        console.log("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç");
        return res.status(401).json({ message: "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞, –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–∞" });
    }

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    const token = authHeader.split(" ")[1];
    console.log("üìú –ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω:", token);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if (!token) {
        console.log("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return res.status(401).json({ message: "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç" });
    }

    console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ —Å —Å–µ–∫—Ä–µ—Ç–æ–º:", process.env.JWT_SECRET);

    try {
        // –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        console.log("‚úÖ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω:", decoded);

        // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –æ–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞
        req.user = decoded;

        // –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–º—É middleware
        next();
    } catch (error) {
        console.log("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞:", error.message);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫ JWT
        if (error.name === "TokenExpiredError") {
            return res.status(401).json({ message: "–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫" });
        }

        if (error.name === "JsonWebTokenError") {
            return res.status(401).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω" });
        }

        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å —Ç–æ–∫–µ–Ω–æ–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â–∏–π –æ—Ç–≤–µ—Ç
        return res.status(500).json({ message: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞" });
    }
};
